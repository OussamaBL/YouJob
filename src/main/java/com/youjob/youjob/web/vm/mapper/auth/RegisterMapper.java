package com.youjob.youjob.web.vm.mapper.auth;

import com.youjob.youjob.domain.Business;
import com.youjob.youjob.domain.Customer;
import com.youjob.youjob.domain.Handyman;
import com.youjob.youjob.domain.User;
import com.youjob.youjob.web.vm.auth.RegisterVM;
import org.mapstruct.InjectionStrategy;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.springframework.stereotype.Component;

@Component
@Mapper(componentModel = "spring", injectionStrategy = InjectionStrategy.CONSTRUCTOR)
public interface RegisterMapper {
    @Mapping(target = "id", ignore = true) // ID is generated by the database
    @Mapping(target = "password", ignore = true) // Password should be encrypted in the service
    @Mapping(target = "role", source = "role")
    User toUser(RegisterVM registerVM);

    @Mapping(target = "vatNumber", source = "vatNumber")
    @Mapping(target = "annonceList", ignore = true)
    @Mapping(target = "id", ignore = true)
    Business toBusiness(RegisterVM registerVM);

    @Mapping(target = "skills", source = "skills")
    @Mapping(target = "rating", source = "rating")
    @Mapping(target = "consultations", ignore = true)
    @Mapping(target = "id", ignore = true)
    Handyman toHandyman(RegisterVM registerVM);

    @Mapping(target = "annonceList", ignore = true)
    @Mapping(target = "id", ignore = true)
    Customer toCustomer(RegisterVM registerVM);

    /**
     * Maps `RegisterVM` to the appropriate user type (`Business`, `Handyman`, or `Customer`) based on `userType`.
     */
    default User mapToSpecificUser(RegisterVM registerVM) {
        switch (registerVM.getRole().name()) {
            case "BUSINESS":
                return toBusiness(registerVM);
            case "HANDYMAN":
                return toHandyman(registerVM);
            case "CUSTOMER":
                return toCustomer(registerVM);
            default:
                throw new IllegalArgumentException("Invalid user type: " + registerVM.getRole().name());
        }
    }
}
